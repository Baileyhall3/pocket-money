<% layout('layout') %>

<div class="flex-container">
    <div class="settings-container variable-width-35">
        <h2>SETTINGS</h2>
        
        <div style="border-bottom: 1px solid rgb(131 131 131);">
            <div class="settings-section">
                <h3>Default Currency</h3>
                <select id="currency-selector" class="input-box">
                    <option value="GBP" <%= userPreferences.default_currency === 'GBP' ? 'selected' : '' %>>British Pound (£)</option>
                    <option value="USD" <%= userPreferences.default_currency === 'USD' ? 'selected' : '' %>>US Dollar ($)</option>
                    <option value="EUR" <%= userPreferences.default_currency === 'EUR' ? 'selected' : '' %>>Euro (€)</option>
                </select>
            </div>
    
            <div class="settings-section">
                <h3>Default Account</h3>
                <select id="default-account" class="input-box">
                    <option value="">-- Select Account --</option>
                    <% accounts.forEach(account => { %>
                        <option value="<%= account.id %>" <%= userPreferences.default_account_id === account.id ? 'selected' : '' %>><%= account.name %></option>
                    <% }) %>
                </select>
            </div>

            <div class="settings-section">
                <h3>Active Budget</h3>
                <select id="active-budget" class="input-box">
                    <option value="">-- Select Budget --</option>
                    <% budgets.forEach(budget => { %>
                        <option value="<%= budget.id %>" <%= userPreferences.active_budget_id === budget.id ? 'selected' : '' %>><%= budget.name %></option>
                    <% }) %>
                </select>
            </div>

            <div class="settings-section">
                <h3>Low Balance Threshold (£)</h3>
                <input id="low-balance-threshold" type="number" class="input-box" placeholder="£" value="<%= userPreferences.low_balance_threshold %>" />
            </div>
        </div>
        
        <div class="notifications-section">
            <h3>Notifications</h3>
            <label><input type="checkbox" id="transaction-alerts" <%= userPreferences.transaction_alerts ? 'checked' : '' %>> Transaction Alerts</label><br>
            <label><input type="checkbox" id="email-alerts" <%= userPreferences.email_notifications ? 'checked' : '' %>> Email Notifications</label><br>
            <label><input type="checkbox" id="budget-alerts" <%= userPreferences.budget_alerts ? 'checked' : '' %>> Budget Alerts</label>
        </div>
    
        <div class="notifications-section">
            <h3>Theme</h3>
            <div>
                <label><input type="radio" name="theme" value="light" <%= userPreferences.default_theme === 'light' ? 'checked' : '' %>> Light Mode</label><br>
                <label><input type="radio" name="theme" value="dark" <%= userPreferences.default_theme === 'dark' ? 'checked' : '' %>> Dark Mode</label><br>
                <label><input type="radio" name="theme" value="auto" <%= userPreferences.default_theme === 'auto' ? 'checked' : '' %>> Auto (System Default)</label>
            </div>
        </div>
    </div>
</div>

<script>
    // Helper function to save preferences
    async function savePreference(key, value) {
        try {
            const response = await fetch('/settings/preferences', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    [key]: value
                })
            });

            if (!response.ok) {
                throw new Error('Failed to save preference');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || 'Failed to save preference');
            }

            // You could add a visual feedback here that the save was successful
            console.log(`Successfully saved ${key}`);
        } catch (error) {
            console.error('Error saving preference:', error);
            // You could add visual feedback here that the save failed
            alert('Failed to save preference. Please try again.');
        }
    }

    // Currency selector
    document.getElementById('currency-selector').addEventListener('change', function() {
        savePreference('default_currency', this.value);
    });

    // Default account
    document.getElementById('default-account').addEventListener('change', function() {
        savePreference('default_account_id', this.value || null);
    });

    // Active budget
    document.getElementById('active-budget').addEventListener('change', function() {
        savePreference('active_budget_id', this.value || null);
    });

    // Low balance threshold
    let lowBalanceTimeout;
    document.getElementById('low-balance-threshold').addEventListener('input', function() {
        // Clear any existing timeout
        if (lowBalanceTimeout) {
            clearTimeout(lowBalanceTimeout);
        }

        // Set a new timeout to save after user stops typing
        lowBalanceTimeout = setTimeout(() => {
            const value = parseFloat(this.value);
            if (!isNaN(value) && value >= 0) {
                savePreference('low_balance_threshold', value);
            }
        }, 500);
    });

    // Notification checkboxes
    document.getElementById('transaction-alerts').addEventListener('change', function() {
        savePreference('transaction_alerts', this.checked);
    });

    document.getElementById('email-alerts').addEventListener('change', function() {
        savePreference('email_notifications', this.checked);
    });

    document.getElementById('budget-alerts').addEventListener('change', function() {
        savePreference('budget_alerts', this.checked);
    });

    // Theme selection
    document.querySelectorAll('input[name="theme"]').forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.checked) {
                savePreference('default_theme', this.value);
            }
        });
    });
</script>
