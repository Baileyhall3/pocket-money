<% layout('layout') %>

<meta name="pot-id" content="<%= pot.id %>">

<div class="flex-container">
    <div class="content-wrapper" style="align-self: start;">
        <div class="container-header variable-width-80">
            <h2><%= pot.name %></h2>
            <div class="dropdown">
                <h3><a class="link" id="pot-actions-btn" href="#">Pot Actions</a></h3>
                <div class="dropdown-content" id="pot-actions-dropdown">
                    <a onclick="openModal('logTransactionModal', { id: '<%= pot.id %>', type: 'pot', name: '<%= escape(pot.name) %>' })" href="#">Log Transaction</a>
                    <% if (sharedWithUser && sharedWithUser.owner_id != user.id) { %>
                        <a href="#" class="disabled-link" title="Only the owner can edit this pot">Edit Pot</a>
                        <a href="#" class="disabled-link" title="Only the owner can delete this pot">Delete Pot</a>
                    <% } else { %>
                        <a onclick="openModal('itemDetailsModal', <%= JSON.stringify(pot) %>)" href="#">Edit Pot</a>
                        <a onclick="openModal('deleteConfirmModal', { id: '<%= pot.id %>', type: 'pot', name: '<%= escape(pot.name) %>' })" href="#">Delete Pot</a>
                    <% } %>
                </div>
            </div>
        </div>
        <div class="charts">
            <div class="charts-wrapper">
                <div class="balance-container variable-width-50">
                    <div class="chart-container">
                        <%- include('partials/savingsDoughnut', { 
                            chartId: `pot-chart-${pot.id}`, 
                            actualAmount: pot.actual_amount, 
                            totalAmount: pot.target_amount,
                            reverseColours: false
                        }) %>
                        <h3 id="title-display">Savings Goal: ¬£<%= pot.actual_amount + " / ¬£" + pot.target_amount %></h3>
                        <% if (pot.target_date) { %>
                            <h3>Target Date: <span class="time-period-dates"><%= DateUtils.toLongDate(pot.target_date) %></span></h3>
                        <% } %>
                    </div>
                    <!-- <% if (transactions.length > 0) { %>
                        <div class="chart-container" style="max-height: 500px; padding-bottom: 10vh;">
                            <h3>Savings Over the Last 7 Days</h3>
                            <canvas id="savingsChart"></canvas>
                        </div>
                    <% } %> -->
                </div>

                <div id="transactions-container" class="transaction-section-detail variable-width-50"">
                    <%- include('partials/transactions', { 
                        transactions: transactions, 
                        currentPage: currentPage, 
                        totalPages: totalPages 
                    }) %>
                </div>
            </div>            
            
            <div class="charts-wrapper">
                <% if (pot.shared_with_id) { %>
                    <%- include('partials/itemParticipants', { 
                        user: user, 
                        sharedWithUser: sharedWithUser, 
                        sharedWithTitle: 'Pot Participants' 
                    }) %>
                <% } %>

                <div class="container-rounded variable-width-50">
                    <h3>Pot Analytics</h3>
                    <% if (pot.target_date) { 
                        const today = new Date();
                        const targetDate = new Date(pot.target_date);
                        const daysLeft = Math.ceil((targetDate - today) / (1000 * 60 * 60 * 24));
                        const remainingAmount = pot.target_amount - pot.actual_amount;
                        const dailySavings = (remainingAmount / daysLeft).toFixed(2);
                        const weeklySavings = (remainingAmount / (daysLeft / 7)).toFixed(2);
                        const monthlySavings = (remainingAmount / (daysLeft / 30)).toFixed(2);
                        const isAfterTargetDate = targetDate < today;
                        const endDaysAgo = Math.ceil((today - targetDate) / (1000 * 60 * 60 * 24));
                        %>
                            <% if (!isAfterTargetDate) { %>
                                <% if (daysLeft <= 7) { %>
                                    <p>üí° You need to save <strong>¬£<%= dailySavings %></strong> per day to meet your target by <%= DateUtils.toLongDate(pot.target_date) %>.</p>
                                <% } else if (daysLeft <= 30) { %>
                                    <p>üí° You need to save <strong>¬£<%= weeklySavings %></strong> per week to meet your target by <%= DateUtils.toLongDate(pot.target_date) %>.</p>
                                <% } else { %>
                                    <p>üí° You need to save <strong>¬£<%= monthlySavings %></strong> per month to meet your target by <%= DateUtils.toLongDate(pot.target_date) %>.</p>
                                <% } %>
                            <% } else { %>
                                <% if (pot.actual_amount != pot.target_amount) { %>
                                <p>
                                    <!-- <i class="fa fa-exclamation-triangle" style="color: red;"></i> -->
                                    ‚ö†Ô∏è Your target date was <%= endDaysAgo %> days ago and you haven't reached your target amount! Consider changing your target date.
                                </p>
                                <% } else { %>
                                    <p>
                                        ‚úÖ Your target date was <strong><%= endDaysAgo %></strong> days ago, and you reached your goal. Well done!
                                    </p>
                                <% } %>
                            <% } %>
                    <% } %>
                    <% const nextMilestone = Math.ceil(pot.actual_amount / pot.target_amount * 100 / 25) * 25; 
                        const milestoneAmount = (pot.target_amount * (nextMilestone / 100)).toFixed(2);
                        const amountToMilestone = (milestoneAmount - pot.actual_amount).toFixed(2);
                    %>
                    <% if(amountToMilestone != 0 && nextMilestone != 0) { %>
                        <p>You‚Äôre ¬£<%= amountToMilestone %> away from reaching <strong><%= nextMilestone %>%</strong> of your savings goal!</p>
                    <% } else if (amountToMilestone == 0 && nextMilestone != 0) { %>
                        <p>You just reached the <strong><%= nextMilestone %>%</strong> mark of your savings goal!</p>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/js/shared.js"></script>

<script>
    async function deletePot(potId) {
        try {
            const response = await fetch(`/pots/${potId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                alert('Pot deleted successfully!');
                window.location.href = '/savings'
            } else {
                const error = await response.json();
                alert(`Failed to delete pot: ${error.message}`);
            }
        } catch (err) {
            console.error('Error deleting pot:', err);
            alert('An error occurred while deleting the pot.');
        }
    }
</script>
