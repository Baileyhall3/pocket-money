<% layout('layout') %>

<meta name="pot-id" content="<%= pot.id %>">

<div class="flex-container">
    <div class="content-wrapper" style="align-self: start;">
        <div class="container-header variable-width-80">
            <h2><%= pot.name %></h2>
            <div class="dropdown">
                <h3><a class="link" id="pot-actions-btn" href="#">Pot Actions</a></h3>
                <div class="dropdown-content" id="pot-actions-dropdown">
                    <a onclick="openModal('logTransactionModal', { id: '<%= pot.id %>', type: 'pot', name: '<%= pot.name %>' })" href="#">Log Transaction</a>
                    <a href="#">Pot Details</a>
                    <a onclick="openModal('deleteConfirmModal', { id: '<%= pot.id %>', type: 'pot', name: '<%= pot.name %>' })" href="#">Delete Pot</a>
                </div>
            </div>
        </div>
        <div class="charts">
            <div class="charts-wrapper">
                <div class="balance-container variable-width-50">
                    <div class="chart-container">
                        <div id="money-bar">
                            <div class="money-pot actual"></div>
                            <div class="money-pot remaining"></div>
                        </div>
                        <h3 id="title-display">Savings Goal: £<%= pot.actual_amount + " / £" + pot.target_amount %></h3>
                        <h3>Target Date: <span class="time-period-dates"><%= DateUtils.toLongDate(pot.target_date) %></span></h3>
                    </div>
                    <% if (transactions.length > 0) { %>
                        <div class="chart-container" style="max-height: 500px; padding-bottom: 10vh;">
                            <h3>Savings Over the Last 7 Days</h3>
                            <canvas id="savingsChart"></canvas>
                        </div>
                    <% } %>
                </div>

                <div id="transactions-container" class="transaction-section-detail variable-width-50"">
                    <%- include('partials/transactions', { 
                        transactions: transactions, 
                        currentPage: currentPage, 
                        totalPages: totalPages 
                    }) %>
                </div>
            </div>            
            
            <div class="charts-wrapper">
                <% if (pot.sharedWithId) { %>
                    <div class="container-rounded variable-width-50">
                        <h3>Pot Participants</h3>
                        <div class="friend-row">
                            <i class="fa fa-user friend-icon" style="display: flex;"></i>
                            <span class="friend-name">
                                <%= sharedWithUser.first_name + " " + sharedWithUser.last_name %>
                            </span>
            
                            <div class="dropdown"><a href="#" class="link"><i class="fa fa-ellipsis-h"></i></a>
                                <div class="dropdown-content">
                                    <a href="#">Profile</a>
                                    <a href="#">Remove from Pot</a>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<script src="/js/shared.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const pot = <%- JSON.stringify(pot) %>;

        const actualAmount = pot.actual_amount <= pot.target_amount ? pot.actual_amount : pot.target_amount;
        const targetAmount = pot.target_amount;

        // Calculate percentages
        const actualPercentage = (actualAmount / targetAmount) * 100;
        const remainingPercentage = 100 - actualPercentage;

        // Set widths dynamically based on calculated percentages
        document.querySelector('.money-pot.actual').style.width = actualPercentage + '%';
        document.querySelector('.money-pot.remaining').style.width = remainingPercentage + '%';

        // Set colors based on percentage thresholds
        if (actualPercentage > 75) {
            document.querySelector('.money-pot.actual').style.backgroundColor = '#45a049'; // green
        } else if (actualPercentage > 25) {
            document.querySelector('.money-pot.actual').style.backgroundColor = '#FFA500'; // amber
        } else {
            document.querySelector('.money-pot.actual').style.backgroundColor = '#FF0000'; // red
        }

        const transactions = <%- JSON.stringify(transactions) %>; // Get transaction data
        
        if (transactions.length > 0) {
            // Get the last 7 days in DD/MM/YYYY format
            const labels = getLast7Days();

            // Prepare the data for the chart
            const savingsData = labels.map(date => {
                // Sum up the transactions for each specific date
                const dailyTotal = transactions
                    .filter(transaction => transaction.date_made === date) // Compare against the formatted date
                    .reduce((total, transaction) => total + transaction.amount, 0);
                return dailyTotal;
            });

            // Chart configuration
            const ctx = document.getElementById('savingsChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels, // Last 7 days
                    datasets: [{
                        label: 'Savings',
                        data: savingsData, 
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                        }
                    }
                }
            });
        }
    });

    async function deletePot(potId) {
        try {
            const response = await fetch(`/pots/${potId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                alert('Pot deleted successfully!');
                window.location.href = '/savings'
            } else {
                const error = await response.json();
                alert(`Failed to delete pot: ${error.message}`);
            }
        } catch (err) {
            console.error('Error deleting pot:', err);
            alert('An error occurred while deleting the pot.');
        }
    }
</script>
